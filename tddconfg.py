# -*- coding: utf-8 -*-
"""staticTDDconfg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AK_ShF5-ymnJ8p5l6y1GHhAgtxMijggk
"""

def TDD_SlotConfigCommon(SCS):

    factor=SCS/15 #=(2^mu)
    slot_duration=1/factor #1/(2^mu)
    period = float(input('please enter dl-UL-TransmissionPeriodicity value in ms: ')) #dl-UL-TransmissionPeriodicity
    while period == 0.625:
      if SCS != 8*15:
       print('wrong value for dl-UL-TransmissionPeriodicity \nplease enter right value for dl-UL-TransmissionPeriodicity "as A value P = 0.625 msec is valid only for mu=3"')
       #as A value P = 0.625 msec is valid only for μref  = 3. [ref:TS 138 213 V16.2.0]
       period = float(input())
    while period == 1.25:
      if SCS != 8*15:
        if SCS !=4*15:
          print('wrong value for dl-UL-TransmissionPeriodicity \nplease enter right value for dl-UL-TransmissionPeriodicity "as A value P = 1.25 msec is valid only for mu2,3"')
          #as A value P = 1.25 msec is valid only for μref  = 2,3. [ref:TS 138 213 V16.2.0]
          period = float(input())
    while period == 2.5:
      if SCS != 2*15:
        if SCS !=4*15:
         if SCS !=8*15:
           print('wrong value for dl-UL-TransmissionPeriodicity \nplease enter right value for dl-UL-TransmissionPeriodicity "as A value P = 2.5 msec is valid only for SCS=1,2,3"')
           #as A value P = 2.5 msec is valid only for μref  = 1,2,3. [ref:TS 138 213 V16.2.0]
           period = float(input())
    import math
    fractional_part, integer_part = math.modf(20/period)
    while fractional_part !=0:
       print('wrong value for dl-UL-TransmissionPeriodicity \nplease enter right value "(20/dl-UL-TransmissionPeriodicity) must have no fraction"')
       #as The first symbol every (20/P) periods is a first symbol in an even frame. [ref:TS 138 213 V16.2.0]
       period = float(input()) #float as period can be 0.625 as example
       fractional_part, integer_part = math.modf(20/period)
    numOfSlotsinP1=period/slot_duration #number of slots in the period
    nrofDownlinkSlots = int(input('please enter nrofDownlinkSlots: '))
    nrofDownlinkSymbols = int(input('please enter nrofDownlinkSymbols: '))
    while nrofDownlinkSymbols>14:
      print('\ninvalid input, nrofDownlinkSymbols <=14\n')
      nrofDownlinkSymbols=int(input('please enter valid nrofDownlinkSymbols: '))
    nrofUplinkSlots = int(input('please enter nrofUplinkSlots: '))
    nrofUplinkSymbols = int(input('please enter nrofUplinkSymbols: '))
    while nrofDownlinkSymbols+nrofUplinkSymbols>14:
      print('\ninvalid input, nrofDownlinkSymbols+nrofUplinkSymbols <=14\n')
      nrofUplinkSymbols=int(input('please enter valid nrofUplinkSymbols: '))
    #calculate total number of slots we will need based on the input for the UL DL slots
    totalNeededSlots=nrofDownlinkSlots+nrofUplinkSlots
    #calculate total number of slots we will need based on the input for the special slots
    if nrofDownlinkSymbols!=0:
       totalNeededSlots+=1
    if nrofUplinkSymbols!=0:
       totalNeededSlots+=1
    while totalNeededSlots>numOfSlotsinP1:
       print('\nwrong value for slot configuration operation, number of needed slots in period > number of slots in period')
       print('number of slots in the given period = ')
       print(numOfSlotsinP1)
       print('\nplease enter right values\n')
       nrofDownlinkSlots = int(input('please enter nrofDownlinkSlots: '))
       nrofDownlinkSymbols = int(input('please enter nrofDownlinkSymbols: '))
       nrofUplinkSlots = int(input('please enter nrofUplinkSlots: '))
       nrofUplinkSymbols = int(input('please enter nrofUplinkSymbols: '))
       #calculate total number of slots we will need based on the input for the UL DL slots
       totalNeededSlots=nrofDownlinkSlots+nrofUplinkSlots
       #calculate total number of slots we will need based on the input for the special slots
       if nrofDownlinkSymbols!=0:
          totalNeededSlots+=1
       if nrofUplinkSymbols!=0:
          totalNeededSlots+=1

    numOfFlexibleSlots=numOfSlotsinP1-nrofDownlinkSlots-nrofUplinkSlots  #non DL or UL slots
    #some variables to use in next operations to set UL and DL slots in the period
    Dslot=nrofDownlinkSlots
    Fslot=numOfFlexibleSlots
    Uslot=nrofUplinkSlots
    Dsym=nrofDownlinkSymbols
    Usym=0 #zero as UL symbols sets at the end of the special slot before the UL slots

    TDD_SlotConfiguration = [] #use to consist 2D array with variable dimentions
    for i in range(1): #set number of raws=1 & nmber of colums is set depending on number of slots
        TDD_SlotConfiguration.append([])
        for j in range(int(numOfSlotsinP1)):
            if  Dslot!=0:
                TDD_SlotConfiguration[i].append('D')
                Dslot-=1
            elif Fslot!=0:
                 if (Fslot==1 and nrofUplinkSymbols!=0) or (Fslot==numOfFlexibleSlots and nrofDownlinkSymbols!=0):
                    TDD_SlotConfiguration[i].append('S') #set the two slots [after the DL slots and before UL slots] as special slot
                    Fslot-=1
                 else:
                    TDD_SlotConfiguration[i].append('F')
                    Fslot-=1
            elif Uslot!=0:
                 TDD_SlotConfiguration[i].append('U')
                 Uslot-=1
    #in this part we are going to consist another array describe two special slots
    #special DLslot
    symbolsperslot=14
    Special_DLSlotConfiguration = []
    for i in range(1):
        Special_DLSlotConfiguration.append([])
        for j in range(int(14)): #14 as numer of symbols in slot always =14
            if  Dsym!=0:
                Special_DLSlotConfiguration[i].append('D')
                Dsym-=1
            else:
                Special_DLSlotConfiguration[i].append('F')
                Fslot-=1
    #special ULslot
    Special_ULSlotConfiguration = []
    for i in range(1):
        Special_ULSlotConfiguration.append([])
        for j in range(int(14)): #14 as numer of symbols in slot always =14
            if  Usym < 14-nrofUplinkSymbols:
                Special_ULSlotConfiguration[i].append('F')
                Usym+=1
            else:
                Special_ULSlotConfiguration[i].append('U')
    return [TDD_SlotConfiguration, Special_DLSlotConfiguration, Special_ULSlotConfiguration]

def draw_frame(cell_text): #function draw the frame
    # get the columns
    cols = len(cell_text[0])
    colors = []
    for i in range(1):
        colors.append([])
        for j in range(cols):
          if  cell_text[0][j]=='D':
            colors[i].append('b')
          if  cell_text[0][j]=='F':
            colors[i].append('w')
          if  cell_text[0][j]=='S':
            colors[i].append('y')
          if  cell_text[0][j]=='U':
            colors[i].append('r')
    fig, ax = plt.subplots()
    ax.axis('off')
    frame = ax.table(cellText=cell_text,cellColours=colors,loc='center')
    plt.show()

def TDD_SlotConfigdedicated(TDD_SlotConfiguration):
    value=0 #use in next check part "make sure that our period has a flexible slot"
    for j in range(len(TDD_SlotConfiguration[0])):
        if TDD_SlotConfiguration[0][j] == 'F': #to make sure that our period has a flexible slot
          value=1
    if  value==1: #so our period has a flexible slot
        print('this configration of our slot ')
        print(TDD_SlotConfiguration)
        slotIndex = int(input('please enter desired flexible symbol position to dedicte its configration: ')) #take umber of slot you want to work on
        while  TDD_SlotConfiguration[0][slotIndex]!='F': #make sure that deticated symbol is a flexible symbol / note slots number start from 0
            print('detecated slot isnot a flexible slot. ')
            slotIndex = int(input('please enter valid flexible symbol position to dedicte its configration: '))
        nrofDownlinkSymbols = int(input('please enter number of DL Symbols: \n')) #number of ul symbols in the slot
        nrofUplinkSymbols = int(input('please enter number of UL Symbols: \n')) #number of Dl symbols in the slot
        while nrofDownlinkSymbols+nrofUplinkSymbols>14:     #make sure that you input a valid values
          print('wrong configuration as number of DL Symbols + number of UL Symbols>14 \nplease enter right values again "number of DL Symbols + number of UL Symbols must be<=14"')
          nrofDownlinkSymbols = int(input('please enter number of DL Symbols: \n'))
          nrofUplinkSymbols = int(input('please enter number of UL Symbols: \n'))
        #Deticted symbol configuration
        symbolsperslot=14
        flexibleSymbol=14-nrofDownlinkSymbols-nrofUplinkSymbols #remaining symbols will set as flexible symbols
        dedictedSlotConfig = [] #use to consist the output array
        for i in range(1):
            dedictedSlotConfig.append([])
            for j in range(int(14)): #14 as numer of symbols in slot always =14
                if  nrofDownlinkSymbols!=0: #first we will set DL symbol
                    dedictedSlotConfig[i].append('D')
                    nrofDownlinkSymbols-=1 #decrease number of DL symbols after setting every DL symbol
                elif flexibleSymbol!=0: #second we will set flexible symbol
                    dedictedSlotConfig[i].append('F')
                    flexibleSymbol-=1 #decrease number of flexible symbols after setting every flexible symbol
                elif nrofUplinkSymbols!=0: #third we will set UL symbol
                        dedictedSlotConfig[i].append('U')
                        nrofUplinkSymbols-=1 #decrease number of UL symbols after setting every UL symbol
        import matplotlib.pyplot as plt
        print('TDD configuration for the Detected Symbol:\n')
        draw_frame(dedictedSlotConfig)
    else: print('our period doesnot have a flexible slots')

SCS = int(input('please enter SCS value in kHz:'))
pattern_Num = int(input('Do you have 1 or 2 pattern?  '))
while pattern_Num>2:
   print('wrong input, number of patterns must be 1 or 2\n please input right values')
   pattern_Num = int(input('Do you have 1 or 2 pattern?  '))
import numpy as np
if pattern_Num==1:
   [TDD_SlotConfiguration, TDD_DLspecialSlot, TDD_ULspecialSlot]=TDD_SlotConfigCommon(SCS)
if pattern_Num==2:
   print('please enter first pattern specs')
   [TDD_SlotConfiguration1, TDD_DLspecialSlot1, TDD_ULspecialSlot1]=TDD_SlotConfigCommon(SCS)
   print('please enter second pattern specs')
   [TDD_SlotConfiguration2, TDD_DLspecialSlot2, TDD_ULspecialSlot2]=TDD_SlotConfigCommon(SCS)
   TDD_SlotConfiguration=np.concatenate((TDD_SlotConfiguration1,TDD_SlotConfiguration2),axis=1)

print('\n')
import matplotlib.pyplot as plt
if pattern_Num==1:
   print('TDD configuration for the whole period:\n')
   draw_frame(TDD_SlotConfiguration)
   print('\nTDD configuration for the special DLslot:')
   draw_frame(TDD_DLspecialSlot)
   print('\nTDD configuration for the special ULslot:')
   draw_frame(TDD_ULspecialSlot)
if pattern_Num==2:
   print('\nTDD configuration for the two periods:')
   draw_frame(TDD_SlotConfiguration)
   print('\nTDD configuration for the special DLslot in the first period:')
   draw_frame(TDD_DLspecialSlot1)
   print('\nTDD configuration for the special ULslot in the first period:')
   draw_frame(TDD_ULspecialSlot1)
   print('\nTDD configuration for the special DLslot in the second period:')
   draw_frame(TDD_DLspecialSlot2)
   print('\nTDD configuration for the special ULslot in the second period:')
   draw_frame(TDD_ULspecialSlot2)

TDD_SlotConfigdedicated(TDD_SlotConfiguration) #dedicated slot configuration function